/*
    This was generated by doing the following:
       -> VS 2015
       -> new project
       -> web -> asp.net web application
       -> Web API
          -> change authentication (on the right) to none
    
    Modification
        -> modifications were made to this controller ONLY to support demo of different functionalities (Get/Put/Post/Delete)

    Purpose:
        -> discuss how Web API is different from regular MVC, what automation is happening, and how to get things started

    Test client:
        -> added a test client to demonstrate functionality of this controller

    Home Controller
        -> added a demo to test/consume this controller

    More info:
        -> CRUD operations (Create, Read, Update, Delete) in Web.Api lingo:

        -> POST is create
        -> GET is read
        -> PUT is update
        -> DELETE is delete
*/

namespace BasicRestApplication.Controllers
{
    using Data;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web.Http;
    using System.Net.Http;
    using System.Net;

    public class ValuesController : ApiController
    {
        /// <summary>
        /// Static here simulates the database.. the way it's setup, it persists data accross calls, so we can see the CRUD operations working
        /// </summary>
        private static List<MyData> myData;

        public ValuesController()
        {
            if (myData == null)
            {
                myData = new List<MyData>()
                {
                    new MyData(1,1, "Error 1"),
                    new MyData(2,1, "Error 2"),
                    new MyData(3,1, "Error 3"),
                };
            }
        }

        // GET api/values
        public IEnumerable<MyData> Get()
        { 
            return myData;
        }

        // GET api/values/5
        public MyData Get(int id)
        {
            // Shows how an exception can be thrown
            if (id == 1)
            { throw new HttpResponseException(HttpStatusCode.ExpectationFailed); }

            // this is very unsafe.. trying to keep things as small as possible..
            return myData.First(x => x.Id == id);
        }

        // POST api/values
        public void Post(MyData value)
        {
            myData.Add(value);
        }

        // PUT api/values/5
        public void Put(int id, MyData value)
        {
            MyData existingItem = myData.First(x => x.Id == id);
            existingItem.Id = value.Id;
            existingItem.Text = value.Text;
        }

        // DELETE api/values/5
        public void Delete(int id)
        {
            // this is very unsafe.. trying to keep things as small as possible..
            myData.Remove(myData.First(x => x.Id == id));
        }
    }
}